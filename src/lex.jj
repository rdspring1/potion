
PARSER_BEGIN(Compiler)
import ast.*;
import java.util.List;
import java.util.ArrayList;
public class Compiler
{
	public static void main(String[] args)
	{
		Program p;
		try {
			p =  new Compiler(System.in).Program();

        } catch (Throwable e) {
            e.printStackTrace();
            return;
        }
	}
}
PARSER_END(Compiler)
TOKEN : {
	<GRAPH: "graph"> |
	<NODES: "nodes"> |
	<EDGES: "edges"> |
	<FOREACH: "foreach"> |
	<ITERATE: "iterate"> |
	<FOR: "for"> |
	<UNROLL: "unroll" > |
	<SET: "set"> |
	<MAIN: "main" > |
	<IN: "in"> |
	<IF: "if"> |
	<ELSE: "else" > |
	<TINT: "int" > |
	<TFLOAT: "float"> |
	<LPAREN: "("> |
	<RPAREN: ")"> |
	<LBRACE: "{"> |
	<RBRACE: "}"> |
	<LSQUARE: "["> |
	<RSQUARE: "]"> |
	<SEMICOLON: ";"> |
	<COLON: ":"> |
	<COMMA: ","> |
	<PLUS: "+"> |
	<MINUS: "-"> |
	<DIV: "/"> |
	<MOD: "%"> |
	<TIMES: "*"> |
	<EQUALS: "="> |
	<LT: "<"> |
	<GT: ">"> |
	<XOR: "^"> |
	<OR: "|"> |
	<QUES: "?"> |
    <ID: <LETTER>("_"|<LETTER>|<DIGIT>)*>|
    <NUM: (<DIGIT>)+> |
	<STR: "\"" (~["\""])* "\""> |
    <#LETTER: ["a"-"z","A"-"Z"]>|
    <#DIGIT: ["0"-"9"]>
}

SKIP : { <" "> | <"\t"> | <"\n"> |<"\r">| <"//" (~["\n","\r"])* ("\n"|"\r")> }

Program Program():
{Graph g; List<Global> globals; List<OpDef> opdefs ; List<ActionDef> actiondefs;}
{
	g = Graph()
	{return null;}
}
Graph Graph():
{List<Attribute> vatts; List<Attribute> eatts;} 
{
	<GRAPH> <LSQUARE> <NODES><LPAREN> vatts = AttList() <RPAREN> <COMMA> <EDGES> <LPAREN> eatts = AttList() <RPAREN> <RSQUARE>
	{return new Graph();}
}
List<Attribute> AttList():
{List <Attribute> attributes; Attribute attribute;}
{
	{attributes = new ArrayList<Attribute>();}
	(attribute = Attribute() {attributes.add(attribute);})*
	{return attributes;}
}
Attribute Attribute():
{Attribute attribute; Identifier id; Type type;}
{
	id = Id() <COLON> type = Type()
	{return new Attribute(id,type);}
}
Type Type():
{}
{
	(<TFLOAT> {return new BaseType(Type.Types.FLOAT);}) |
	(<TINT> {return new BaseType(Type.Types.INT);})
	(<SET> <LSQUARE> <TFLOAT> <RSQUARE>{return new SetType(Type.Types.FLOAT);}) |
	(<SET> <LSQUARE><TINT> <RSQUARE>{return new SetType(Type.Types.INT);})
}
Identifier Id():
{Token tok;}
{
	tok = <ID> { return new Identifier(tok.image);}
}
