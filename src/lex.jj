
PARSER_BEGIN(Compiler)
import ast.*;
import java.util.List;
import java.util.ArrayList;
public class Compiler
{
	public static void main(String[] args)
	{
		Exp p;
		try {
			p =  new Compiler(System.in).Exp();

        } catch (Throwable e) {
            e.printStackTrace();
            return;
        }
	}
}
PARSER_END(Compiler)
TOKEN : {
	<GRAPH: "graph"> |
	<NODES: "nodes"> |
	<EDGES: "edges"> |
	<FOREACH: "foreach"> |
	<ITERATE: "iterate"> |
	<FOR: "for"> |
	<UNROLL: "unroll" > |
	<SET: "set"> |
	<EMPTY: "empty"> |
	<MAIN: "main" > |
	<IN: "in"> |
	<IF: "if"> |
	<ELSE: "else" > |
	<TINT: "int" > |
	<TFLOAT: "float"> |
	<LPAREN: "("> |
	<RPAREN: ")"> |
	<LCURLY: "{"> |
	<RCURLY: "}"> |
	<LSQUARE: "["> |
	<RSQUARE: "]"> |
	<SEMICOLON: ";"> |
	<COLON: ":"> |
	<COMMA: ","> |
	<PLUS: "+"> |
	<MINUS: "-"> |
	<DIV: "/"> |
	<MOD: "%"> |
	<TIMES: "*"> |
	<EQUALS: "="> |
	<LT: "<"> |
	<GT: ">"> |
	<CARET: "^"> |
	<PIPE: "|"> |
	<AMP: "&"> |
	<BANG: "!"> |
	<QUES: "?"> |
    <ID: <LETTER>("_"|<LETTER>|<DIGIT>)*>|
    <NUM: (<DIGIT>)+> |
	<STR: "\"" (~["\""])* "\""> |
    <#LETTER: ["a"-"z","A"-"Z"]>|
    <#DIGIT: ["0"-"9"]>
}

SKIP : { <" "> | <"\t"> | <"\n"> |<"\r">| <"//" (~["\n","\r"])* ("\n"|"\r")> }

Program Program():
{Graph g; List<Global> globals; List<OpDef> opdefs ; List<ActionDef> actiondefs;}
{
	g = Graph()
	globals = Globals()
	opdefs = OpDefs()
	{return null;}
}
Graph Graph():
{List<Attribute> vatts; List<Attribute> eatts;} 
{
	<GRAPH> <LSQUARE> <NODES><LPAREN> vatts = AttList() <RPAREN> <COMMA> <EDGES> <LPAREN> eatts = AttList() <RPAREN> <RSQUARE>
	{return new Graph();}
}
List<Global> Globals():
{List <Global> globals; Global global;}
{
	{globals = new ArrayList<Global>();}
	(global = Global() {globals.add(global);})*
	{return globals;}
}
Global Global():
{Identifier id; Type type;}
{
	id = Id()
	type = Type()
	{return new Global(id,type);}
}
List<OpDef> OpDefs():
{List<OpDef> defs; OpDef def;}
{
	{defs = new ArrayList<OpDef>();}
	(def = OpDef() {defs.add(def);})*
	{return defs;}
	
}
OpDef OpDef():
{}
{
	<LPAREN>
	{return null;}
}

List<Attribute> AttList():
{List <Attribute> attributes; Attribute attribute;}
{
	{attributes = new ArrayList<Attribute>();}
	(attribute = Attribute() {attributes.add(attribute);})*
	{return attributes;}
}
Attribute Attribute():
{Attribute attribute; Identifier id; Type type;}
{
	id = Id() <COLON> type = Type()
	{return new Attribute(id,type);}
}
Type Type():
{}
{
	(<TFLOAT> {return new BaseType(Type.Types.FLOAT);}) |
	(<TINT> {return new BaseType(Type.Types.INT);})
	(<SET> <LSQUARE> <TFLOAT> <RSQUARE>{return new SetType(Type.Types.FLOAT);}) |
	(<SET> <LSQUARE><TINT> <RSQUARE>{return new SetType(Type.Types.INT);})
}
Identifier Id():
{Token tok;}
{
	tok = <ID> { return new Identifier(tok.image);}
}
Exp Exp():
{Exp lhs; Exp rhs; Identifier id;}
{
	(<EMPTY> {return new Empty();})
	|(<LCURLY> id = Id()<RCURLY> {return new Set(id);})
	|(lhs = If() {return lhs;})
	|id = Id() {return new Var(id);}
	|(lhs = Number() {return lhs;})
	|(<LPAREN> lhs = ParenExp() <RPAREN> {return lhs;})
}
Exp ParenExp():
{Exp lhs; Exp rhs; Identifier id;}
{
		LOOKAHEAD(3)
		 id = Id() <IN> lhs = Exp() { return new BoolIn(id,lhs);} |
		 <BANG> lhs = Exp(){return new Not(lhs);} |
		 lhs = Exp() rhs = BinExp(lhs) {return rhs;}
}
Exp BinExp(Exp lhs):
{Exp rhs; Identifier id;}
{
	   	LOOKAHEAD(2)
		<AMP><AMP> rhs = Exp() {return new BoolAnd(lhs,rhs);} |
		<AMP> rhs = Exp() {return new Intersection(lhs,rhs);}|
	   	LOOKAHEAD(2)
		<PIPE><PIPE> rhs = Exp() {return new BoolOr(lhs,rhs);}|
		<PIPE> rhs = Exp() {return new Union(lhs,rhs);}|
		<LT> rhs = Exp() {return new LessThan(lhs,rhs);}|
		<EQUALS><EQUALS> rhs = Exp() {return new BoolEq(lhs,rhs);}|
		<PLUS> rhs = Exp() {return new Plus(lhs,rhs);}|
		<MINUS> rhs = Exp() {return new Minus(lhs,rhs);}
		<TIMES> rhs = Exp() {return new Times(lhs,rhs);}
		<DIV> rhs = Exp() {return new Div(lhs,rhs);}
}
Exp Number():
{Token tok;}
{
	tok = <NUM> {return new IntConst(tok.image);}
}
Exp If():
{Exp cond ; Exp tcase; Exp fcase;}
{
	<IF> <LPAREN> cond = Exp() <LCURLY> tcase = Exp() <RCURLY> <ELSE> <LCURLY> fcase = Exp() <RCURLY>
	{return new If(cond,tcase,fcase);}
}
